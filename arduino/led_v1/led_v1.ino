
#include "SPI.h"
//**************************************************************//
//  Name    : shiftOutCode, Hello World                                
//  Author  : Carlyn Maw,Tom Igoe, David A. Mellis 
//  Date    : 25 Oct, 2006    
//  Modified: 23 Mar 2010                                 
//  Version : 2.0                                             
//  Notes   : Code for using a 74HC595 Shift Register           //
//          : to count from 0 to 255                           
//****************************************************************

//Pin connected to ST_CP of 74HC595
#define latchPin  8
//Pin connected to SH_CP of 74HC595
//#define clockPin 12
////Pin connected to DS of 74HC595
//#define dataPin  11

#define aPin 5
#define bPin 6

byte DATA[12][16] ={ 

{0xFF,0xFF,0xFF,0x11,0x93,0x93,0x93,0x93,0xAB,0xAB,0xAB,0xAB,0xAB,0x29,0xFF,0xFF},/*"M",0*/
{0xFF,0xFF,0xFF,0x11,0x93,0x93,0x93,0x93,0xAB,0xAB,0xAB,0xAB,0xAB,0x29,0xFF,0xFF},/*"M",1*/
{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},/*" ",2*/
{0xFF,0xFF,0xFF,0x1F,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBD,0x01,0xFF,0xFF},/*"L",3*/
{0xFF,0xFF,0xFF,0x03,0xBD,0xB7,0xB7,0x87,0xB7,0xB7,0xBF,0xBD,0xBD,0x03,0xFF,0xFF},/*"E",4*/
{0xFF,0xFF,0xFF,0x07,0xBB,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBB,0x07,0xFF,0xFF},/*"D",5*/
{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},/*" ",6*/
{0xFF,0xFF,0xFF,0xC1,0xBD,0xBD,0x7F,0x7F,0x7F,0x7F,0x7F,0xBD,0xBB,0xC7,0xFF,0xFF},/*"C",7*/
{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0xBD,0xE1,0xDD,0xBD,0xBD,0xC0,0xFF,0xFF},/*"a",8*/
{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x11,0xCD,0xDF,0xDF,0xDF,0xDF,0x07,0xFF,0xFF},/*"r",9*/
{0xFF,0xFF,0xFF,0xF9,0xFD,0xFD,0xFD,0xE1,0xDD,0xBD,0xBD,0xBD,0xD9,0xE4,0xFF,0xFF},/*"d",10*/
{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},/*" ",11*/



};



void setup() {
  //set pins to output so you can control the shift register
  pinMode(latchPin, OUTPUT);
  //pinMode(clockPin, OUTPUT);
  //pinMode(dataPin, OUTPUT);
  pinMode(aPin, OUTPUT);
  pinMode(bPin, OUTPUT);
  SPI.begin();
  SPI.setBitOrder(MSBFIRST);
}

void send(byte b) {
  //shiftOut(dataPin, clockPin, MSBFIRST, b);
  SPI.transfer(b);
}

void clear() {
  // clear 74HC959 status
  digitalWrite(latchPin, LOW);
  for(int i=0; i<12; i++){
    send(0xFF);
    send(0xFF);
    send(0xFF);
    send(0xFF);
  }
  digitalWrite(latchPin, HIGH);
}

void loop() {
  int T = 100;
  byte d = 0;
  int y = 0;
  int q = 0;
  int P = 0;
  int L = 0;
  for(int offset=0; offset<8*12; offset++){
    for(int t=0; t<T; t++){      
      for(int j=0; j<4; j++){
        clear();
        digitalWrite(latchPin, LOW);
        digitalWrite(aPin, j % 2 == 0 ? LOW : HIGH);
        digitalWrite(bPin, (j >> 1) % 2 == 0 ? LOW : HIGH);
        for(int p=0; p<12; p++){
          for(int z=4; z>0; z--){
            y = offset / 8;
            q = offset % 8;
            P = y + p;
            L = z*4 - (4-j);
            if (P >= 12) {
              d = 0xFF;
            } else {
              d = DATA[P][L];
              if (q) {
                d = d << q;
                if (P+1==12) { // last data
                  d = d ^ (0xFF << q);
                  d = ~ d;
                } else {
                  byte _d = ((DATA[P+1][L] >> 1) & 0x7F) >> (8 - q - 1);
                  d = d | _d;
                }
                
              }
            }
            send(d);
          }
        }
        digitalWrite(latchPin, HIGH);
        //delay(1);
      }
    }
  }
}