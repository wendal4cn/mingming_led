
#include "SPI.h"
//**************************************************************//
//  Name    : MingMing LED                            
//  Author  : wendal chen 
//  Date    : 2014/08/23    
//  Modified: 2014/08/25                                 
//  Version : 1.0                        
//****************************************************************

//Pin connected to ST_CP of 74HC595
int latchPin = 8;
//Pin connected to SH_CP of 74HC595
int clockPin = 12;
////Pin connected to DS of 74HC595
int dataPin  = 11;

int aPin     = 4;
int bPin     = 7;

byte DATA[46][16] ={ 


{0xFB,0xFB,0xFB,0xFB,0xFB,0x83,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xE3,0x1B,0xBB,0xFB},
{0xBF,0xBF,0xBF,0xBB,0xB7,0xAF,0x9F,0xBF,0xBF,0xBF,0xBF,0xBD,0xBD,0xBD,0xC1,0xFF},/*"北",0*/
{0xFD,0xFE,0x00,0xFF,0xFF,0xE0,0xEF,0xEF,0xEF,0xE0,0xFE,0xEE,0xEE,0xDE,0xBA,0xFD},
{0xFF,0xFF,0x01,0xFF,0xFF,0x0F,0xEF,0xEF,0xEF,0x0F,0xFF,0xEF,0xF7,0xFB,0xFB,0xFF},/*"京",1*/
{0xEF,0xEF,0xD0,0xBF,0x68,0xEB,0xDB,0x98,0x5F,0xD0,0xDF,0xDF,0xDA,0xDA,0xD6,0xDF},
{0xBF,0xBF,0x01,0xBF,0x03,0x5B,0x5B,0x03,0xFF,0x01,0xBF,0xDB,0xDD,0xF5,0xF7,0x07},/*"德",2*/
{0xEF,0xEF,0xDF,0xDF,0xB4,0x0D,0xED,0xDD,0xBD,0x05,0xBD,0xFC,0xE5,0x1D,0xBD,0xFD},
{0xDF,0xDF,0xDF,0xDF,0x01,0xDD,0xDD,0xDD,0xAD,0xB5,0x75,0xFD,0xFD,0xFD,0xF5,0xFB},/*"纳",3*/
{0xF7,0xE2,0x0F,0xEF,0xEF,0x02,0xEF,0xC7,0xCB,0xAF,0xAC,0x6F,0xEF,0xEF,0xEF,0xEF},
{0xEF,0xEF,0x6F,0x6F,0xEF,0xEF,0x6F,0x6F,0xEF,0xE1,0x0F,0xEF,0xEF,0xEF,0xEF,0xEF},/*"科",4*/
{0xEF,0xEF,0xEF,0xEC,0x03,0xEF,0xEF,0xEA,0xE7,0xCF,0x2F,0xEF,0xEF,0xEF,0xAE,0xD9},
{0xDF,0xDF,0xDF,0x01,0xDF,0xDF,0xDF,0x03,0x7B,0x77,0xB7,0xAF,0xDF,0xAF,0x77,0xF9},/*"技",5*/
{0xFD,0xFD,0x00,0xFB,0xFB,0xF0,0xF7,0xE7,0xD0,0xB7,0x77,0xF0,0xF7,0xF7,0xF7,0xF7},
{0xFF,0xFF,0x01,0xFF,0xFF,0x0F,0xEF,0xEF,0x0F,0xEF,0xEF,0x0F,0xEF,0xEF,0xAF,0xDF},/*"有",6*/
{0xFF,0x84,0xB5,0xAD,0xAC,0x9D,0xAD,0xB4,0xB5,0xB5,0x95,0xAD,0xBD,0xBD,0xBC,0xBD},
{0xFF,0x07,0xF7,0xF7,0x07,0xF7,0xF7,0x07,0xBB,0xB7,0xCF,0xDF,0xEF,0x77,0xF9,0xFF},/*"限",7*/
{0xFF,0xFB,0xFB,0xF7,0xF7,0xEF,0xDF,0xBD,0x7D,0xFB,0xFB,0xF7,0xEF,0xC0,0xEF,0xFF},
{0x7F,0x7F,0x7F,0xBF,0xBF,0xDF,0xEF,0xF7,0xF9,0xFF,0xBF,0xDF,0xDF,0x0F,0xEF,0xFF},/*"公",8*/
{0xFF,0xC0,0xFF,0xFF,0x80,0xFF,0xFF,0xE0,0xEF,0xEF,0xEF,0xEF,0xE0,0xEF,0xFF,0xFF},
{0xFF,0x07,0xF7,0xF7,0x17,0xF7,0xF7,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0xD7,0xEF},/*"司",9*/
{0xFF,0xFF,0xFF,0xC7,0xBB,0x7D,0x7D,0x7D,0x7D,0x7D,0x4D,0x35,0xB3,0xC7,0xF9,0xFF},/*"Q",10*/
{0xFF,0xFF,0xFF,0x29,0x6D,0x6D,0x6D,0x6D,0x55,0x55,0x93,0xBB,0xBB,0xBB,0xFF,0xFF},/*"W",11*/
{0xFF,0xFF,0xFF,0x03,0xBD,0xB7,0xB7,0x87,0xB7,0xB7,0xBF,0xBD,0xBD,0x03,0xFF,0xFF},/*"E",12*/
{0xFF,0xFF,0xFF,0x03,0xBD,0xBD,0xBD,0x83,0xB7,0xB7,0xBB,0xBB,0xBD,0x1C,0xFF,0xFF},/*"R",13*/
{0xFF,0xFF,0xFF,0x01,0x6D,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xC7,0xFF,0xFF},/*"T",14*/
{0xFF,0xFF,0xFF,0x11,0xBB,0xBB,0xD7,0xD7,0xEF,0xEF,0xEF,0xEF,0xEF,0xC7,0xFF,0xFF},/*"Y",15*/
{0xFF,0xFF,0xFF,0x18,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xC3,0xFF,0xFF},/*"U",16*/
{0xFF,0xFF,0xFF,0x83,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0x83,0xFF,0xFF},/*"I",17*/
{0xFF,0xFF,0xFF,0xC7,0xBB,0x7D,0x7D,0x7D,0x7D,0x7D,0x7D,0x7D,0xBB,0xC7,0xFF,0xFF},/*"O",18*/
{0xFF,0xFF,0xFF,0x03,0xBD,0xBD,0xBD,0xBD,0x83,0xBF,0xBF,0xBF,0xBF,0x1F,0xFF,0xFF},/*"P",19*/
{0xFF,0xFF,0xFF,0xEF,0xEF,0xE7,0xD7,0xD7,0xDB,0xC3,0xBB,0xBD,0xBD,0x18,0xFF,0xFF},/*"A",20*/
{0xFF,0xFF,0xFF,0xC1,0xBD,0xBD,0xBF,0xDF,0xE7,0xFB,0xFD,0xBD,0xBD,0x83,0xFF,0xFF},/*"S",21*/
{0xFF,0xFF,0xFF,0x07,0xBB,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBB,0x07,0xFF,0xFF},/*"D",22*/
{0xFF,0xFF,0xFF,0x03,0xBD,0xB7,0xB7,0x87,0xB7,0xB7,0xBF,0xBF,0xBF,0x1F,0xFF,0xFF},/*"F",23*/
{0xFF,0xFF,0xFF,0xC3,0xBB,0xBB,0x7F,0x7F,0x7F,0x71,0x7B,0xBB,0xBB,0xC7,0xFF,0xFF},/*"G",24*/
{0xFF,0xFF,0xFF,0x18,0xBD,0xBD,0xBD,0xBD,0x81,0xBD,0xBD,0xBD,0xBD,0x18,0xFF,0xFF},/*"H",25*/
{0xFF,0xFF,0xFF,0xC1,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0x77,0x0F},/*"J",26*/
{0xFF,0xFF,0xFF,0x11,0xBB,0xB7,0xAF,0x8F,0xAF,0xB7,0xB7,0xBB,0xBB,0x11,0xFF,0xFF},/*"K",27*/
{0xFF,0xFF,0xFF,0x1F,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBD,0x01,0xFF,0xFF},/*"L",28*/
{0xFF,0xFF,0xFF,0x81,0x7B,0xFB,0xF7,0xF7,0xEF,0xDF,0xDF,0xBD,0xBD,0x03,0xFF,0xFF},/*"Z",29*/
{0xFF,0xFF,0xFF,0x18,0xBD,0xDB,0xDB,0xE7,0xE7,0xE7,0xDB,0xDB,0xBD,0x18,0xFF,0xFF},/*"X",30*/
{0xFF,0xFF,0xFF,0xC1,0xBD,0xBD,0x7F,0x7F,0x7F,0x7F,0x7F,0xBD,0xBB,0xC7,0xFF,0xFF},/*"C",31*/
{0xFF,0xFF,0xFF,0x18,0xBD,0xBD,0xBB,0xDB,0xDB,0xD7,0xD7,0xE7,0xEF,0xEF,0xFF,0xFF},/*"V",32*/
{0xFF,0xFF,0xFF,0x07,0xBB,0xBB,0xBB,0x87,0xBB,0xBD,0xBD,0xBD,0xBB,0x07,0xFF,0xFF},/*"B",33*/
{0xFF,0xFF,0xFF,0x38,0x9D,0x9D,0xAD,0xAD,0xB5,0xB5,0xB5,0xB9,0xB9,0x1D,0xFF,0xFF},/*"N",34*/
{0xFF,0xFF,0xFF,0x11,0x93,0x93,0x93,0x93,0xAB,0xAB,0xAB,0xAB,0xAB,0x29,0xFF,0xFF},/*"M",35*/

};

int CNF_SCREEN_W = 3*32;
int CNF_SCREEN_H = 1*16;
int CNF_SCREEN_W_POINT = 8;
int DATA_Column_COUNT = 46;
int CNF_LINE_SCAN = 4;
int CNF_FRAME_STILL = 5;
int CNF_USE_SPI = 1;
int CNF_USE_MM_LED = 0;


void setup() {
  if (CNF_USE_MM_LED == 0) {
    pinMode(latchPin, OUTPUT);
    pinMode(aPin, OUTPUT);
    pinMode(bPin, OUTPUT);
  }
  if (CNF_USE_SPI != 0) {
    SPI.begin();
    SPI.setBitOrder(MSBFIRST);
    } else {
      pinMode(clockPin, OUTPUT);
      pinMode(dataPin, OUTPUT);
    }
  }

void send(byte b) {
    if (CNF_USE_SPI!=0) {
      SPI.transfer(b);
    } else {
      shiftOut(dataPin, clockPin, MSBFIRST, b);
    }
  }

void clear() {
  // clear 74HC959 status
  digitalWrite(latchPin, LOW);
  for(int i=0; i<DATA_Column_COUNT; i++){
    for(int z=0; z<CNF_LINE_SCAN; z++){
      send(0xFF);
    }
  }
  digitalWrite(latchPin, HIGH);
}

void lock_and_display(byte A, byte B) {
  if (CNF_USE_MM_LED) {
    ;
  } else {
    digitalWrite(aPin, A);
    digitalWrite(bPin, B);
    digitalWrite(latchPin, HIGH);
  }
}

void loop() {
  byte d = 0;
  int y = 0;
  int q = 0;
  int P = 0;
  int L = 0;
  int SCREEN_TOTLE_COLUMN = CNF_SCREEN_W / CNF_SCREEN_W_POINT;
  for(int offset=0; offset<DATA_Column_COUNT*8; offset++){
  //for(int offset=DATA_Column_COUNT*8; offset>0; offset--){
    for(int t=0; t<CNF_FRAME_STILL; t++){      
      for(int j=0; j<(CNF_SCREEN_H/CNF_LINE_SCAN); j++){ // SCAN TIMES
        //clear();
        delay(2);
        digitalWrite(latchPin, LOW);
        for(int p=0; p<SCREEN_TOTLE_COLUMN; p++){
          for(int z=CNF_LINE_SCAN; z>0; z--){
            y = offset / CNF_SCREEN_W_POINT;
            q = offset % CNF_SCREEN_W_POINT;
            P = y + p;
            L = z*CNF_LINE_SCAN - ((CNF_SCREEN_H / CNF_LINE_SCAN)-j);
            if (P >= DATA_Column_COUNT) {
              P = P - DATA_Column_COUNT;
            }
            if (P >= DATA_Column_COUNT) {
              d = 0xFF;
            } else {
              d = DATA[P][L];
              if (q != 0) {
                d = d << q;
                if (P+1==DATA_Column_COUNT) { // last data
                  d = d ^ (0xFF << q);
                  d = ~ d;
                } else {
                  byte _d = ((DATA[P+1][L] >> 1) & 0x7F) >> (8 - q - 1);
                  d = d | _d;
                }
              }
            }
            send(d);
          }
        }
        lock_and_display(j % 2 == 0 ? LOW : HIGH, (j >> 1) % 2 == 0 ? LOW : HIGH);
      }
    }
  }
}